---
title: "Machine Learning Mini Project"
author: "Karen Guerrero" 
format: pdf
---

```{r}
read.csv("WisconsinCancer.csv")
```

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
wisc.df
```

```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
wisc.data
```


```{r}
## Create diagnosis vector that contains the data from the diagnosis column of the original dataset
diagnosis <- as.factor(wisc.df$diagnosis) 
```

##Q1. How many observations are in this dataset?

```{r}
nrow(wisc.data)
```

There are 569 observations (patients) in this dataset. 

##Q2. How many of the observations have a malignant diagnosis?

```{r}
table(diagnosis)
```

There are 212 observations (patients) that have a malignant diagnosis. 

##How many variables/features in the data are suffixed with _mean?

```{r}
grep('mean', colnames(wisc.data))
```

There are 10 variables in the data that are suffixed with _mean. 

```{r}
# Check column means and standard deviations
colMeans(wisc.data)

apply(wisc.data,2,sd)
```

```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale=T)
```


```{r}
# Look at summary of results
summary(wisc.pr)
```

##Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

Based off the summary results, 0.4427 of the original variance is captured by the first principal components (PC1). 

##Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

Three principal components (PCs) are required to describe at least 70% of the original variance in the data. The three PCs are PC1, PC2 and PC3.

##Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

Seven principal components (PCs) are required to describe at least 90% of the original variance in the data. The seven PCs are PC1, PC2, PC3, PC4, PC5, PC6 and PC7. 

```{r}
#Create biplot 

biplot(wisc.pr)
```

##Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

The scale for this plot is too big which makes it difficult to individually see each data point. It is too much to data in the same area to interpret. It is difficult to understand because all the data is squished together so it is extremely difficult to interpret when you can't individually read/see each data point. 

```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis , xlab = "PC1", ylab = "PC2")
```

##Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

The scatterplot created with PC1 and PC2 has better seperation in comparison to PC1/PC3 scatterplot. 

```{r}
# Scatter plot observations by components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis , xlab = "PC1", ylab = "PC3")
```

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col= diagnosis) + geom_point()
```

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```


##Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean? This tells us how much this original feature contributes to the first PC.

The component of the loading vector for the feature concave.points_mean is -0.26085376. 

```{r}
wisc.pr$rotation[,1]
```

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

```{r}
#Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset and assign the result to data.dist
data.dist <- dist(data.scaled)
```

```{r}
#Create a hierarchical clustering model using complete linkage. Manually specify the method argument to hclust() and assign the results to wisc.hclust.
wisc.hclust <- hclust(data.dist)
```


##Q10. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

The height at which the clustering model has 4 clusters is 19.

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```


```{r}
#Use cutree() to cut the tree so that it has 4 clusters. Assign the output to the variable wisc.hclust.clusters
wisc.hclust.clusters <- cutree(wisc.hclust, h=19)
table(wisc.hclust.clusters, diagnosis)
```

##Q11. OPTIONAL: Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10? How do you judge the quality of your result in each case? -----

##Q12. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning

My favorite method to use is "ward.D2" because it provides the most clear separation of the two different diagnosis. (as shown below) 

```{r}
data.dist.ward.D2 <- dist(wisc.pr$x [, 1:7])
wisc.pr.hclust.ward.D2 <- hclust(data.dist.ward.D2, method="ward.D2")
grps.ward.D2 <- cutree(wisc.pr.hclust.ward.D2, k=2)
table(grps.ward.D2,diagnosis)
```

```{r}
data.dist.single <- dist(wisc.pr$x [, 1:7])
wisc.pr.hclust.single <- hclust(data.dist.single, method="single")
grps.single <- cutree(wisc.pr.hclust.single, k=2)
table(grps.single,diagnosis)
```

```{r}
data.dist.complete <- dist(wisc.pr$x [, 1:7])
wisc.pr.hclust.complete <- hclust(data.dist.complete, method="complete")
grps.complete <- cutree(wisc.pr.hclust.complete, k=2)
table(grps.complete,diagnosis)
```

```{r}
data.dist.average <- dist(wisc.pr$x [, 1:7])
wisc.pr.hclust.average <- hclust(data.dist.average, method="complete")
grps.average <- cutree(wisc.pr.hclust.average, k=2)
table(grps.average,diagnosis)
```



#Combine methods

PCA is often used as a first step in further analysis. Here we will combine PCA and clustering. 

We have our PCA results in 'wisc.pr$x'
```{r}
data.dist <- dist(wisc.pr$x [, 1:7])
wisc.pr.hclust <- hclust(data.dist, method="ward.D2")

```

```{r}
plot(wisc.pr.hclust)
```

```{r}
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```

How do these "grps" i.e. clusters correspond to the expert diagnoses?

```{r}
table(diagnosis, grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
```

```{r}
g <- as.factor(grps)
levels(g)
```

```{r}
g <- relevel(g,2)
levels(g)
```

```{r}
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

```{r}
library(rgl)
plot3d(wisc.pr$x[,1:3], xlab="PC 1", ylab="PC 2", zlab="PC 3", cex=1.5, size=1, type="s", col=grps)
```

```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(data.dist, method="ward.D2")

#Cut this hierarchical clustering model into 2 clusters and assign the results to wisc.pr.hclust.clusters
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=4)
```

##Q13. How well does the newly created model with four clusters separate out the two diagnoses?

The newly created model does a good job separating out the two diagnoses in the four clusters. I rated how well it separated the diagnoses by visually looking at the results.
```{r}
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
```


##Q14. How well do the hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

The newly created model does a good job separating out the two diagnoses in the four clusters. I rated how well it separated the diagnoses by visually looking at the results.

```{r}
table(wisc.hclust.clusters, diagnosis)
```

##Q15. OPTIONAL: Which of your analysis procedures resulted in a clustering model with the best specificity? How about sensitivity?

The wisc.pr.hclust.clusters clustering model would results with the best specificity and sensitivity. (I caluculated the specificity and sensitivity below to prove)

```{r}
#Cut this hierarchical clustering model into 2 clusters and assign the results to wisc.pr.hclust.clusters
wisc.pr.hclust.clusters2 <- cutree(wisc.pr.hclust, k=2)
table(wisc.pr.hclust.clusters2, diagnosis)
#Calculate Specificity: TrueNegative/(TrueNegative+FalseNegative)
specificity=329/(329+28)
specificity

#Calculate sensitivity: TruePositive/(TruePostivie+FalseNegative)
sensitivity=188/(188+24)
sensitivity

```

```{r}
#Cut this hierarchical clustering model into 2 clusters and assign the results to wisc.pr.hclust.clusters

wisc.hclust.clusters2 <- cutree(wisc.hclust, k=2)
table(wisc.hclust.clusters2, diagnosis)
#Calculate Specificity: TrueNegative/(TrueNegative+FalseNegative)
specificity=357/(357+0)
specificity

#Calculate sensitivity: TruePositive/(TruePostivie+FalseNegative)
sensitivity=210/(2+210)
sensitivity
```



```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

##Q16. Which of these new patients should we prioritize for follow up based on your results?

The patients with the malignant diagnosis (red dots, group 2) should be prioritized! 
