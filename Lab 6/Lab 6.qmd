---
title: "Lab 6"
author: "Karen Guerrero"
format: pdf
---
 
Write a function to grade some student homework.

Start by adding simple input example - a vector of student homework scores.

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]


```{r}
#view student1 homework scores
student1
```

```{r}
#obtain the average of the student1 homework scores by using the following function: 'mean()' 
mean(student1)
```

To find the position of the smalleset value (i.e. min) value in our vector we can use 'which.min()'

```{r}
#obtain the min value of the student1 homework scores by using the following function: 'which.min()' 
which.min(student1)
```

```{r}
#view student1 homework scores
student1
#view specifically student1's homework 8 score
student1[8]
```


Provides the min value for student1
```{r}
student1[which.min(student1)]
```

Code is used to get everything but the min value 
```{r}
student1[-which.min(student1)]
```


This will get us the mean value of the vector, minus the lowest score
```{r}
#this is my first solution
mean(student1[-which.min(student1)])
```

```{r}
#View student2 homework scores
student2
```

Not a great way of grading because this will just NOT include the NA value rather than inputing it as a 0
```{r}
#will give average of student2 homework assignments (using mean() function) and will exclude NA values (including na.rm = TRUE in the function)
mean(student2, na.rm = TRUE)
```


```{r}
#obtaining average of student2 scores without including the second homework assignment score
mean(student2[-2])
```

```{r}
#View student 3 homework scores
student3
```

```{r}
mean(na.omit[student3])
```


```{r}
#obtaining average of student3 scores and excluding NA values
mean(student3, na.rm = TRUE)
```

Map/Change NA values to zero.
How do I identify NA values?
Use the 'is.na() function. 
```{r}
student2
is.na(student2)
```

Identify the NA values
Changing NA to 0 value
```{r}
#assign student2 scores to x
x <- student2
#view student2 scores
x
#changing all the NA values in student2 homework scores to 0
x[is.na(x)] <- 0
#View student2 scores with NA values changed to 0
x
#obtain the average of the student2 homework scores with 0 replacing the NA values
mean(x)
```

```{r}
#assign student3 scores to x
x <- student3
#changing all the NA values in student3 homework scores to 0
x[is.na(x)] <- 0
#obtain the average of the student3 homework scores with 0 replacing the NA values, minus the lowest score
mean(x[-which.min(x)])
```

##Creating a function

Will take the working snippet and make it a function
```{r}
grade <- function(x){
  x[is.na(x)] <- 0
mean(x[-which.min(x)])
}
```

Use the function created
```{r}
grade(student1)
grade(student2)
grade(student3)
```

Take gradebook and grade the whole class of multiple students

```{r}
#' Title
#' Calculate average scores for a vector of home scores
#' dropping the lowest single scre. Missing values
#' will be treated as zero score
#' 
#' @param x Numeric vector of homework scores
#'
#' @return Average Score
#' @export
#'
#' @examples
#'  student <- c(100, NA, 90, 80)
#' grade(students)
grade <- function(x){
  # Map NA missing homework values to equal to zero (replacing NA with 0)
  # Missing homework scores zero
  x[is.na(x)] <- 0
  # Exclude lowest score homework
mean(x[-which.min(x)])
}
```

```{r}
#assigning data fro url link to the name url
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
```

```{r}
apply(gradebook, 1, grade)
```


Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
#sorting the grades from decrease -> increasing to identify the student with the highest grade
results <- apply(gradebook, 1, grade)
sort (results)
```

```{r}
#change the sorting order to increase -> decrease
results <- apply(gradebook, 1, grade)
sort (results, decreasing = TRUE)
```


```{r}
#will tell us exactly who received the highest score
which.max(results)
```


Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

we want to calculate a summary stat for each assignment (column) of the gradebook
```{r}
#First caluclate average
hw.ave <- apply(gradebook, 2, mean, na.rm = TRUE)

#figure out which assignment had the lowest average
which.min(hw.ave)


```

```{r}
#First caluclate median
hw.med <- apply(gradebook, 2, median, na.rm = TRUE)
#figure out which assignment had the lowest median
which.min(hw.med)
```

Plot the median and mean to see the differences
```{r}
boxplot(gradebook)
```

Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
#set all the NA values to 0
gradebook [ is.na(gradebook)] <- 0
#obtain cor value of specific hw assigment (column)
cor(results, gradebook$hw5)
```

```{r}
apply(gradebook, 2, cor, x= results)
```



Q5. Make sure you save your Quarto document and can click the “Render” (or Rmark- down”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]

